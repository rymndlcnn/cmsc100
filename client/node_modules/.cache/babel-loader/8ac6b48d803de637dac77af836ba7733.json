{"ast":null,"code":"var _jsxFileName = \"/home/ruart/Desktop/SocialMedia100/client/src/Components/GetPosts.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport GetComments from './GetComments.js';\n\nclass GetPosts extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: 0,\n      postId: 0,\n      posts: []\n    };\n    this.getPost = this.getPost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.editPost = this.editPost.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      newComment: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    const comment = {\n      comment: this.state.newComment,\n      userId: this.props.id,\n      commentId: this.state.commentId\n    };\n    fetch('http://localhost:3000/edit-comment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(comment)\n    }).then(response => response.json()).then(body => {\n      if (body.success) {\n        window.location.reload();\n      } else {\n        alert('Failed to post');\n      }\n    });\n    event.preventDefault();\n  }\n\n  editPost(postId) {\n    this.setState({\n      edit: true,\n      postId: postId\n    });\n  }\n\n  deletePost(postId) {\n    const post = {\n      postId: postId\n    };\n    fetch('http://localhost:3000/delete-post/?userId=' + postId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    }).then(response => {\n      return response.json();\n    }).then(res => {\n      console.log(res.result);\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  getPost(userId) {\n    fetch('http://localhost:3000/get-posts/?userId=' + userId).then(response => {\n      return response.json();\n    }).then(res => {\n      console.log(res.result);\n      this.setState({\n        posts: res.result\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  componentDidMount() {\n    if (localStorage.usertoken) {\n      var token = localStorage.usertoken;\n      var decoded = jwt_decode(token);\n      this.setState({\n        userId: decoded.userId\n      });\n      fetch('http://localhost:3000/get-posts/?userId=' + this.props.id).then(response => {\n        return response.json();\n      }).then(res => {\n        console.log(res.result);\n        this.setState({\n          posts: res.result\n        });\n      }).catch(e => {\n        console.log(e);\n      });\n    }\n  }\n\n  render() {\n    const PostList = () => {\n      const options = this.state.posts.map(i => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/profile/?userId=' + i.userId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, i.username)), i.content, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), this.props.id == this.state.userId ? React.createElement(Button, {\n        onClick: () => this.deletePost(i.postId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \" Delete\") : \"\", this.props.id == this.state.userId ? React.createElement(Button, {\n        onClick: () => this.editComment(i.commentId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \" Edit Post\") : \"\", React.createElement(Button, {\n        onClick: () => this.addComment(i.postId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \" Add Comment\"), React.createElement(GetComments, {\n        id: i.userId,\n        postId: i.postId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }))));\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, options);\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(PostList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), this.state.edit ? React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"What's on your mind?\", React.createElement(\"textarea\", {\n      content: this.state.newPost,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })) : \"\");\n  }\n\n}\n\nexport default GetPosts;","map":{"version":3,"sources":["/home/ruart/Desktop/SocialMedia100/client/src/Components/GetPosts.js"],"names":["React","Component","Button","Link","withRouter","jwt_decode","GetComments","GetPosts","constructor","state","userId","postId","posts","getPost","bind","deletePost","handleChange","editPost","handleSubmit","event","setState","newComment","target","value","comment","props","id","commentId","fetch","method","headers","body","JSON","stringify","then","response","json","success","window","location","reload","alert","preventDefault","edit","post","res","console","log","result","catch","e","componentDidMount","localStorage","usertoken","token","decoded","render","PostList","options","map","i","username","content","editComment","addComment","newPost"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom'\nimport jwt_decode from 'jwt-decode'\n\nimport GetComments from './GetComments.js'\n\nclass GetPosts extends Component{\n\tconstructor(){\n        super()\n        this.state = {\n            userId: 0,\n            postId:0,\n            posts: []        \n        }\n        this.getPost = this.getPost.bind(this)\n        this.deletePost = this.deletePost.bind(this)\n\n        this.handleChange = this.handleChange.bind(this)\n        this.editPost = this.editPost.bind(this)\n\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({newComment: event.target.value});\n      }\n\n    handleSubmit(event){\n        const comment = {\n            comment: this.state.newComment,\n            userId: this.props.id,\n            commentId: this.state.commentId\n        }\n        fetch('http://localhost:3000/edit-comment',\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(comment)\n          })\n          .then(response => response.json())\n          .then(body => {\n            if(body.success){\n                window.location.reload()\n            }else{ \n                alert('Failed to post') \n            }\n          })\n          event.preventDefault()\n    }\n\n    editPost(postId){\n        this.setState({\n            edit:true,\n            postId: postId\n        })\n    }\n\n\n    deletePost(postId){\n        const post = {\n            postId: postId,\n            \n        }\n        fetch('http://localhost:3000/delete-post/?userId='+postId,\n        {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(post)\n          })\n            .then((response) => { return response.json() })\n            .then((res) => {\n                console.log(res.result)\n                \n            })\n            .catch((e) => { console.log(e)});\n\n    }\n\n\n    getPost(userId){\n    \tfetch('http://localhost:3000/get-posts/?userId='+userId)\n            .then((response) => { return response.json() })\n            .then((res) => {\n                console.log(res.result)\n                this.setState({posts: res.result})\n            })\n            .catch((e) => { console.log(e)});\n    }\n\n    componentDidMount(){\n      if(localStorage.usertoken){\n        var token = localStorage.usertoken\n        var decoded = jwt_decode(token)\n        this.setState({\n            userId: decoded.userId\n        })\n        fetch('http://localhost:3000/get-posts/?userId='+this.props.id)\n            .then((response) => { return response.json() })\n            .then((res) => {\n                console.log(res.result)\n                this.setState({posts: res.result})\n            })\n            .catch((e) => { console.log(e)});\n      }\n    }\n\n    render(){\n\n    \tconst PostList = () => {\n    \t\tconst options = this.state.posts.map((i) => (\n        \t\t<div>\t\n                    <ul>\n                        <Link to = {'/profile/?userId='+i.userId}>\n                            <li>{i.username}</li>    \n                        </Link> \n                        {i.content}\n                        <br/>\n                        {this.props.id == this.state.userId ? \n                            <Button onClick = {() => this.deletePost(i.postId)}> Delete</Button> : \"\"}\n                        {this.props.id == this.state.userId ?\n                            <Button onClick = {() => this.editComment(i.commentId)}> Edit Post</Button> : \"\"}\n\n                        <Button onClick = {() => this.addComment(i.postId)}> Add Comment</Button> \n                        <GetComments id = {i.userId} postId = {i.postId}/>\n                    </ul>\n                </div>    \n\t        ))\n\t        return <ul>{options}</ul>\n\t     }\n    \treturn(\n    \t\t<div>\n    \t\t\t<PostList/>\n                {this.state.edit ?\n                            <form onSubmit={this.handleSubmit}>\n                                <label>\n                                    What's on your mind?\n                                    <textarea content={this.state.newPost} onChange={this.handleChange} />\n                                </label>\n                                <input type=\"submit\"  value=\"Submit\" />\n                            </form> : \"\"}\n    \t\t</div>\n    \t)\n    }\n}\nexport default GetPosts;"]},"metadata":{},"sourceType":"module"}