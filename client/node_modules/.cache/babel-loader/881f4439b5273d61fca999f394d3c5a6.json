{"ast":null,"code":"var _jsxFileName = \"/home/ruart/Desktop/SocialMedia100/client/src/Components/GetComments.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\n\nclass GetComments extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: 0,\n      edit: false,\n      newComment: \"\",\n      comments: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.deleteComment = this.deleteComment.bind(this);\n    this.editComment = this.editComment.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      newComment: event.target.value\n    });\n  }\n\n  handleSubmit(event, commentId) {\n    const comment = {\n      comment: this.state.newComment,\n      userId: this.props.id,\n      commentId: commentId\n    };\n    fetch('http://localhost:3000/edit-comment', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(comment)\n    }).then(response => response.json()).then(body => {\n      if (body.success) {\n        window.location.reload();\n      } else {\n        alert('Failed to post');\n      }\n    });\n    event.preventDefault();\n  }\n\n  editComment() {\n    this.setState({\n      edit: true\n    });\n  }\n\n  deleteComment(commentId) {\n    const comment = {\n      commentId: commentId\n    };\n    fetch('http://localhost:3000/delete-comment/?commentId=' + commentId, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(comment)\n    }).then(response => {\n      return response.json();\n    }).then(res => {\n      console.log(res.result);\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  componentDidMount() {\n    if (localStorage.usertoken) {\n      var token = localStorage.usertoken;\n      var decoded = jwt_decode(token);\n      this.setState({\n        userId: decoded.userId\n      });\n      console.log(this.props.id);\n      console.log(this.props.postId);\n      fetch('http://localhost:3000/get-comments/?userId=' + this.props.id + \"&postId=\" + this.props.postId).then(response => {\n        return response.json();\n      }).then(res => {\n        console.log(res.result);\n        this.setState({\n          comments: res.result\n        });\n      }).catch(e => {\n        console.log(e);\n      });\n    }\n  }\n\n  render() {\n    const CommentList = () => {\n      const options = this.state.comments.map(i => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: '/profile/?userId=' + i.userId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, i.username)), i.comment, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), this.props.id == this.state.userId ? React.createElement(Button, {\n        onClick: () => this.deleteComment(i.commentId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \" Delete Comment\") : \"\", this.props.id == this.state.userId ? React.createElement(Button, {\n        onClick: () => this.editComment(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \" Edit Comment\") : \"\")));\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, options);\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(CommentList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), this.state.edit ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"What's on your mind?\", React.createElement(\"textarea\", {\n      content: this.state.newComment,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })) : \"\"));\n  }\n\n}\n\nexport default GetComments;","map":{"version":3,"sources":["/home/ruart/Desktop/SocialMedia100/client/src/Components/GetComments.js"],"names":["React","Component","Button","Link","withRouter","jwt_decode","GetComments","constructor","state","userId","edit","newComment","comments","handleChange","bind","deleteComment","editComment","handleSubmit","event","setState","target","value","commentId","comment","props","id","fetch","method","headers","body","JSON","stringify","then","response","json","success","window","location","reload","alert","preventDefault","res","console","log","result","catch","e","componentDidMount","localStorage","usertoken","token","decoded","postId","render","CommentList","options","map","i","username"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom'\nimport jwt_decode from 'jwt-decode'\n\nclass GetComments extends Component{\n\tconstructor(){\n        super()\n        this.state = {\n            userId: 0,\n            edit: false,\n            newComment: \"\",\n            comments: []        \n        }\n                this.handleChange = this.handleChange.bind(this)\n\n        this.deleteComment = this.deleteComment.bind(this)\n        this.editComment = this.editComment.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({newComment: event.target.value});\n      }\n\n    handleSubmit(event, commentId){\n        const comment = {\n            comment: this.state.newComment,\n            userId: this.props.id,\n            commentId: commentId\n        }\n        fetch('http://localhost:3000/edit-comment',\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(comment)\n          })\n          .then(response => response.json())\n          .then(body => {\n            if(body.success){\n                window.location.reload()\n            }else{ \n                alert('Failed to post') \n            }\n          })\n          event.preventDefault()\n    }\n\n    editComment(){\n        this.setState({edit:true})\n    }\n\n    deleteComment(commentId){\n        const comment = {\n            commentId: commentId,\n            \n        }\n        fetch('http://localhost:3000/delete-comment/?commentId='+commentId,\n        {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(comment)\n          })\n            .then((response) => { return response.json() })\n            .then((res) => {\n                console.log(res.result)\n                \n            })\n            .catch((e) => { console.log(e)});\n\n    }\n    \n    componentDidMount(){\n      if(localStorage.usertoken){\n        var token = localStorage.usertoken\n        var decoded = jwt_decode(token)\n        this.setState({\n            userId: decoded.userId\n        })\n        console.log(this.props.id)\n        console.log(this.props.postId)\n        fetch('http://localhost:3000/get-comments/?userId='+this.props.id+\"&postId=\"+this.props.postId)\n            .then((response) => { return response.json() })\n            .then((res) => {\n                console.log(res.result)\n                this.setState({comments: res.result})\n            })\n            .catch((e) => { console.log(e)});    \n      }\n    }\n\n    render(){\n\n    \tconst CommentList = () => {\n    \t\tconst options = this.state.comments.map((i) => (\n        \t\t<div>\t\n                    <ul>\n                        <Link to = {'/profile/?userId='+i.userId}>\n                            <li>{i.username}</li>    \n                        </Link> \n                        {i.comment}\n                        <br/>\n                        {this.props.id == this.state.userId ?\n                        <Button onClick = {() => this.deleteComment(i.commentId)}> Delete Comment</Button> : \"\"}\n                        {this.props.id == this.state.userId ?\n                        <Button onClick = {() => this.editComment()}> Edit Comment</Button> : \"\"}\n                        \n                    </ul>\n                </div>    \n\t        ))\n\t        return <ul>{options}</ul>\n\t     }\n    \treturn(\n    \t\t<div>\n                <form onSubmit={this.handleSubmit}>\n    \t\t\t<CommentList/>\n                {this.state.edit ?\n                    <div>\n                                <label>\n                                    What's on your mind?\n                                    <textarea content={this.state.newComment} onChange={this.handleChange} />\n                                </label>\n                                <input type=\"submit\" value=\"Submit\" />\n                    </div>                                         : \"\"}\n\n                </form>\n    \t\t</div>\n    \t)\n    }\n}\nexport default GetComments;"]},"metadata":{},"sourceType":"module"}