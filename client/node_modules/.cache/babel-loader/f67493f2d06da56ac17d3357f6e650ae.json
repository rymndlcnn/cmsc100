{"ast":null,"code":"var _jsxFileName = \"/home/ruart/Desktop/SocialMedia100/client/src/Components/DeletePost.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\n\nclass DeletePost extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userId: 0,\n      posts: []\n    };\n    this.getPost = this.getPost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n  }\n\n  deletePost(postId) {}\n\n  getPost(userId) {\n    fetch('http://localhost:3000/get-posts/?userId=' + userId).then(response => {\n      return response.json();\n    }).then(res => {\n      console.log(res.result);\n      this.setState({\n        posts: res.result\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  componentDidMount() {\n    if (localStorage.usertoken) {\n      var token = localStorage.usertoken;\n      var decoded = jwt_decode(token);\n      this.setState({\n        userId: decoded.userId\n      });\n      const post = {\n        postId: this.props.postId\n      };\n      fetch('http://localhost:3000/delete-post/?userId=' + post.postId, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(post)\n      }).then(response => {\n        return response.json();\n      }).then(res => {\n        console.log(res.result);\n      }).catch(e => {\n        console.log(e);\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default DeletePost;","map":{"version":3,"sources":["/home/ruart/Desktop/SocialMedia100/client/src/Components/DeletePost.js"],"names":["React","Component","Button","Link","withRouter","jwt_decode","DeletePost","constructor","state","userId","posts","getPost","bind","deletePost","postId","fetch","then","response","json","res","console","log","result","setState","catch","e","componentDidMount","localStorage","usertoken","token","decoded","post","props","method","headers","body","JSON","stringify","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAkC;AACjCM,EAAAA,WAAW,GAAE;AACN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,CADC;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDC,EAAAA,UAAU,CAACC,MAAD,EAAQ,CAEjB;;AAGDH,EAAAA,OAAO,CAACF,MAAD,EAAQ;AACdM,IAAAA,KAAK,CAAC,6CAA2CN,MAA5C,CAAL,CACQO,IADR,CACcC,QAAD,IAAc;AAAE,aAAOA,QAAQ,CAACC,IAAT,EAAP;AAAwB,KADrD,EAEQF,IAFR,CAEcG,GAAD,IAAS;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,MAAhB;AACA,WAAKC,QAAL,CAAc;AAACb,QAAAA,KAAK,EAAES,GAAG,CAACG;AAAZ,OAAd;AACH,KALR,EAMQE,KANR,CAMeC,CAAD,IAAO;AAAEL,MAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;AAAe,KANtC;AAOA;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,QAAGC,YAAY,CAACC,SAAhB,EAA0B;AACxB,UAAIC,KAAK,GAAGF,YAAY,CAACC,SAAzB;AACA,UAAIE,OAAO,GAAGzB,UAAU,CAACwB,KAAD,CAAxB;AACA,WAAKN,QAAL,CAAc;AACVd,QAAAA,MAAM,EAAEqB,OAAO,CAACrB;AADN,OAAd;AAGA,YAAMsB,IAAI,GAAG;AACTjB,QAAAA,MAAM,EAAE,KAAKkB,KAAL,CAAWlB;AADV,OAAb;AAIAC,MAAAA,KAAK,CAAC,+CAA6CgB,IAAI,CAACjB,MAAnD,EACL;AACImB,QAAAA,MAAM,EAAE,MADZ;AAEIC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAFb;AAKIC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALV,OADK,CAAL,CAQKf,IARL,CAQWC,QAAD,IAAc;AAAE,eAAOA,QAAQ,CAACC,IAAT,EAAP;AAAwB,OARlD,EASKF,IATL,CASWG,GAAD,IAAS;AACXC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,MAAhB;AAEH,OAZL,EAaKE,KAbL,CAaYC,CAAD,IAAO;AAAEL,QAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;AAAe,OAbnC;AAeD;AACF;;AAEDa,EAAAA,MAAM,GAAE;AACP,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAMA;;AA9D6B;;AAgElC,eAAehC,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link, withRouter } from 'react-router-dom'\nimport jwt_decode from 'jwt-decode'\n\nclass DeletePost extends Component{\n\tconstructor(){\n        super()\n        this.state = {\n            userId: 0,\n            posts: []        \n        }\n        this.getPost = this.getPost.bind(this)\n        this.deletePost = this.deletePost.bind(this)\n    }\n\n    deletePost(postId){\n        \n    }\n\n\n    getPost(userId){\n    \tfetch('http://localhost:3000/get-posts/?userId='+userId)\n            .then((response) => { return response.json() })\n            .then((res) => {\n                console.log(res.result)\n                this.setState({posts: res.result})\n            })\n            .catch((e) => { console.log(e)});\n    }\n\n    componentDidMount(){\n      if(localStorage.usertoken){\n        var token = localStorage.usertoken\n        var decoded = jwt_decode(token)\n        this.setState({\n            userId: decoded.userId\n        })\n        const post = {\n            postId: this.props.postId,\n            \n        }\n        fetch('http://localhost:3000/delete-post/?userId='+post.postId,\n        {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(post)\n          })\n            .then((response) => { return response.json() })\n            .then((res) => {\n                console.log(res.result)\n                \n            })\n            .catch((e) => { console.log(e)});\n\n      }\n    }\n\n    render(){\n    \treturn(\n    \t\t<div>\n    \t\t\t\n\n    \t\t</div>\n    \t)\n    }\n}\nexport default DeletePost;"]},"metadata":{},"sourceType":"module"}